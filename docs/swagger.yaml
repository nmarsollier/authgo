basePath: /v1
definitions:
  errs.ValidationErr:
    properties:
      messages:
        items:
          $ref: '#/definitions/errs.errField'
        type: array
    type: object
  errs.errField:
    properties:
      message:
        type: string
      path:
        type: string
    type: object
  rabbit.message:
    properties:
      correlation_id:
        example: "123123"
        type: string
      message:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbklEIjoiNjZiNjBlYzhlMGYzYzY4OTUzMzJlOWNmIiwidXNlcklEIjoiNjZhZmQ3ZWU4YTBhYjRjZjQ0YTQ3NDcyIn0.who7upBctOpmlVmTvOgH1qFKOHKXmuQCkEjMV3qeySg
        type: string
    type: object
  rest.changePasswordBody:
    properties:
      currentPassword:
        maxLength: 100
        minLength: 1
        type: string
      newPassword:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - currentPassword
    - newPassword
    type: object
  rest.grantPermissionBody:
    properties:
      permissions:
        items:
          type: string
        type: array
    required:
    - permissions
    type: object
  server.ErrorData:
    properties:
      error:
        type: string
    type: object
  user.SignInRequest:
    properties:
      login:
        type: string
      password:
        type: string
    required:
    - login
    - password
    type: object
  user.SignUpRequest:
    properties:
      login:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - login
    - name
    - password
    type: object
  user.TokenResponse:
    properties:
      token:
        type: string
    type: object
  user.UserData:
    properties:
      enabled:
        type: boolean
      id:
        type: string
      login:
        type: string
      name:
        type: string
      permissions:
        items:
          type: string
        type: array
    type: object
host: localhost:3000
info:
  contact:
    email: nmarsollier@gmail.com
    name: Nestor Marsollier
  description: Microservicio de Autentificación.
  title: AuthGo
  version: "1.0"
paths:
  /rabbit/logout:
    put:
      consumes:
      - application/json
      description: SendLogout envía un broadcast a rabbit con logout. Esto no es Rest
        es RabbitMQ.
      parameters:
      - description: Token deshabilitado
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/rabbit.message'
      produces:
      - application/json
      responses: {}
      summary: Mensage Rabbit
      tags:
      - Rabbit
  /v1/user:
    post:
      consumes:
      - application/json
      description: Registra un nuevo usuario en el sistema.
      parameters:
      - description: Informacion de ususario
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User Token
          schema:
            $ref: '#/definitions/user.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ValidationErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorData'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorData'
      summary: Registrar Usuario
      tags:
      - Seguridad
  /v1/user/password:
    post:
      consumes:
      - application/json
      description: Cambia la contraseña del usuario actual.
      parameters:
      - description: Passwords
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/rest.changePasswordBody'
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ValidationErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorData'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorData'
      summary: Cambiar Password
      tags:
      - Seguridad
  /v1/user/signin:
    post:
      consumes:
      - application/json
      description: Loguea un usuario en el sistema.
      parameters:
      - description: Sign in information
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User Token
          schema:
            $ref: '#/definitions/user.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ValidationErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorData'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorData'
      summary: Login
      tags:
      - Seguridad
  /v1/user/signout:
    get:
      consumes:
      - application/json
      description: Desloguea un usuario en el sistema, invalida el token.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: No Content
        "500":
          description: Error response
          schema:
            $ref: '#/definitions/server.ErrorData'
      summary: Logout
      tags:
      - Seguridad
  /v1/users:
    get:
      consumes:
      - application/json
      description: Obtiene información de todos los usuarios. El usuario logueado
        debe tener permisos "admin".
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Users
          schema:
            items:
              items:
                $ref: '#/definitions/user.UserData'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ValidationErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorData'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorData'
      summary: Listar Usuarios
      tags:
      - Seguridad
  /v1/users/:userID/grant:
    post:
      consumes:
      - application/json
      description: Otorga permisos al usuario indicado, el usuario logueado tiene
        que tener permiso "admin".
      parameters:
      - description: ID del usuario a habilitar permiso
        in: path
        name: userId
        required: true
        type: string
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Permisos a Habilitar
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/rest.grantPermissionBody'
      produces:
      - application/json
      responses:
        "200":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ValidationErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorData'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorData'
      summary: Haiblitar permisos
      tags:
      - Seguridad
  /v1/users/:userID/revoke:
    post:
      consumes:
      - application/json
      description: Quita permisos al usuario indicado, el usuario logueado tiene que
        tener permiso "admin".
      parameters:
      - description: ID del usuario a quitar permiso
        in: path
        name: userId
        required: true
        type: string
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Permisos a Qutiar
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/rest.grantPermissionBody'
      produces:
      - application/json
      responses:
        "200":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ValidationErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorData'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorData'
      summary: Quitar permisos
      tags:
      - Seguridad
  /v1/users/:userId/disable:
    post:
      consumes:
      - application/json
      description: Deshabilita un usuario en el sistema. El usuario logueado debe
        tener permisos "admin".
      parameters:
      - description: ID del usuario a deshabilitar
        in: path
        name: userId
        required: true
        type: string
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ValidationErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorData'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorData'
      summary: Deshabilitar Usuario
      tags:
      - Seguridad
  /v1/users/:userId/enable:
    post:
      consumes:
      - application/json
      description: Habilita un usuario en el sistema. El usuario logueado debe tener
        permisos "admin".
      parameters:
      - description: ID del usuario a habilitar
        in: path
        name: userId
        required: true
        type: string
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ValidationErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorData'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorData'
      summary: Enable User
      tags:
      - Seguridad
  /v1/users/current:
    get:
      consumes:
      - application/json
      description: Obtiene información del usuario actual.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/user.UserData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ValidationErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorData'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorData'
      summary: Usuario Actual
      tags:
      - Seguridad
swagger: "2.0"
