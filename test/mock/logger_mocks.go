// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/engine/log/logger.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	log "github.com/nmarsollier/authgo/internal/engine/log"
	logrus "github.com/sirupsen/logrus"
)

// MockLogRusEntry is a mock of LogRusEntry interface.
type MockLogRusEntry struct {
	ctrl     *gomock.Controller
	recorder *MockLogRusEntryMockRecorder
}

// MockLogRusEntryMockRecorder is the mock recorder for MockLogRusEntry.
type MockLogRusEntryMockRecorder struct {
	mock *MockLogRusEntry
}

// NewMockLogRusEntry creates a new mock instance.
func NewMockLogRusEntry(ctrl *gomock.Controller) *MockLogRusEntry {
	mock := &MockLogRusEntry{ctrl: ctrl}
	mock.recorder = &MockLogRusEntryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogRusEntry) EXPECT() *MockLogRusEntryMockRecorder {
	return m.recorder
}

// Data mocks base method.
func (m *MockLogRusEntry) Data() logrus.Fields {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(logrus.Fields)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockLogRusEntryMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockLogRusEntry)(nil).Data))
}

// Error mocks base method.
func (m *MockLogRusEntry) Error(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLogRusEntryMockRecorder) Error(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogRusEntry)(nil).Error), args...)
}

// Fatal mocks base method.
func (m *MockLogRusEntry) Fatal(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLogRusEntryMockRecorder) Fatal(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogRusEntry)(nil).Fatal), args...)
}

// Info mocks base method.
func (m *MockLogRusEntry) Info(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLogRusEntryMockRecorder) Info(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogRusEntry)(nil).Info), args...)
}

// Warn mocks base method.
func (m *MockLogRusEntry) Warn(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLogRusEntryMockRecorder) Warn(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogRusEntry)(nil).Warn), args...)
}

// WithField mocks base method.
func (m *MockLogRusEntry) WithField(key string, value interface{}) log.LogRusEntry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithField", key, value)
	ret0, _ := ret[0].(log.LogRusEntry)
	return ret0
}

// WithField indicates an expected call of WithField.
func (mr *MockLogRusEntryMockRecorder) WithField(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithField", reflect.TypeOf((*MockLogRusEntry)(nil).WithField), key, value)
}
