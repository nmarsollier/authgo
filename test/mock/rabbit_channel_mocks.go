// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/engine/rbt/rabbit_channel.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRabbitChannel is a mock of RabbitChannel interface.
type MockRabbitChannel struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitChannelMockRecorder
}

// MockRabbitChannelMockRecorder is the mock recorder for MockRabbitChannel.
type MockRabbitChannelMockRecorder struct {
	mock *MockRabbitChannel
}

// NewMockRabbitChannel creates a new mock instance.
func NewMockRabbitChannel(ctrl *gomock.Controller) *MockRabbitChannel {
	mock := &MockRabbitChannel{ctrl: ctrl}
	mock.recorder = &MockRabbitChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbitChannel) EXPECT() *MockRabbitChannelMockRecorder {
	return m.recorder
}

// ExchangeDeclare mocks base method.
func (m *MockRabbitChannel) ExchangeDeclare(name, chType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeDeclare", name, chType)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeDeclare indicates an expected call of ExchangeDeclare.
func (mr *MockRabbitChannelMockRecorder) ExchangeDeclare(name, chType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeDeclare", reflect.TypeOf((*MockRabbitChannel)(nil).ExchangeDeclare), name, chType)
}

// Publish mocks base method.
func (m *MockRabbitChannel) Publish(exchange, routingKey string, body []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", exchange, routingKey, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockRabbitChannelMockRecorder) Publish(exchange, routingKey, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockRabbitChannel)(nil).Publish), exchange, routingKey, body)
}
