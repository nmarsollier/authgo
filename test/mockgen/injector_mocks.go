// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/engine/di/injector.go

// Package mockgen is a generated GoMock package.
package mockgen

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/nmarsollier/authgo/internal/engine/db"
	log "github.com/nmarsollier/authgo/internal/engine/log"
	rbt "github.com/nmarsollier/authgo/internal/engine/rbt"
	rabbit "github.com/nmarsollier/authgo/internal/rabbit"
	token "github.com/nmarsollier/authgo/internal/token"
	usecases "github.com/nmarsollier/authgo/internal/usecases"
	user "github.com/nmarsollier/authgo/internal/user"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockInjector is a mock of Injector interface.
type MockInjector struct {
	ctrl     *gomock.Controller
	recorder *MockInjectorMockRecorder
}

// MockInjectorMockRecorder is the mock recorder for MockInjector.
type MockInjectorMockRecorder struct {
	mock *MockInjector
}

// NewMockInjector creates a new mock instance.
func NewMockInjector(ctrl *gomock.Controller) *MockInjector {
	mock := &MockInjector{ctrl: ctrl}
	mock.recorder = &MockInjectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInjector) EXPECT() *MockInjectorMockRecorder {
	return m.recorder
}

// Database mocks base method.
func (m *MockInjector) Database() *mongo.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database")
	ret0, _ := ret[0].(*mongo.Database)
	return ret0
}

// Database indicates an expected call of Database.
func (mr *MockInjectorMockRecorder) Database() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockInjector)(nil).Database))
}

// InvalidateTokenUseCase mocks base method.
func (m *MockInjector) InvalidateTokenUseCase() usecases.InvalidateTokenUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateTokenUseCase")
	ret0, _ := ret[0].(usecases.InvalidateTokenUseCase)
	return ret0
}

// InvalidateTokenUseCase indicates an expected call of InvalidateTokenUseCase.
func (mr *MockInjectorMockRecorder) InvalidateTokenUseCase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateTokenUseCase", reflect.TypeOf((*MockInjector)(nil).InvalidateTokenUseCase))
}

// Logger mocks base method.
func (m *MockInjector) Logger() log.LogRusEntry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(log.LogRusEntry)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockInjectorMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockInjector)(nil).Logger))
}

// RabbitChannel mocks base method.
func (m *MockInjector) RabbitChannel() rbt.RabbitChannel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RabbitChannel")
	ret0, _ := ret[0].(rbt.RabbitChannel)
	return ret0
}

// RabbitChannel indicates an expected call of RabbitChannel.
func (mr *MockInjectorMockRecorder) RabbitChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RabbitChannel", reflect.TypeOf((*MockInjector)(nil).RabbitChannel))
}

// SendLogoutService mocks base method.
func (m *MockInjector) SendLogoutService() rabbit.SendLogoutService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLogoutService")
	ret0, _ := ret[0].(rabbit.SendLogoutService)
	return ret0
}

// SendLogoutService indicates an expected call of SendLogoutService.
func (mr *MockInjectorMockRecorder) SendLogoutService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLogoutService", reflect.TypeOf((*MockInjector)(nil).SendLogoutService))
}

// SignInUseCase mocks base method.
func (m *MockInjector) SignInUseCase() usecases.SignInUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignInUseCase")
	ret0, _ := ret[0].(usecases.SignInUseCase)
	return ret0
}

// SignInUseCase indicates an expected call of SignInUseCase.
func (mr *MockInjectorMockRecorder) SignInUseCase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInUseCase", reflect.TypeOf((*MockInjector)(nil).SignInUseCase))
}

// SignUpUseCase mocks base method.
func (m *MockInjector) SignUpUseCase() usecases.SignUpUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpUseCase")
	ret0, _ := ret[0].(usecases.SignUpUseCase)
	return ret0
}

// SignUpUseCase indicates an expected call of SignUpUseCase.
func (mr *MockInjectorMockRecorder) SignUpUseCase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpUseCase", reflect.TypeOf((*MockInjector)(nil).SignUpUseCase))
}

// TokenCache mocks base method.
func (m *MockInjector) TokenCache() token.TokenCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenCache")
	ret0, _ := ret[0].(token.TokenCache)
	return ret0
}

// TokenCache indicates an expected call of TokenCache.
func (mr *MockInjectorMockRecorder) TokenCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenCache", reflect.TypeOf((*MockInjector)(nil).TokenCache))
}

// TokenCollection mocks base method.
func (m *MockInjector) TokenCollection() db.Collection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenCollection")
	ret0, _ := ret[0].(db.Collection)
	return ret0
}

// TokenCollection indicates an expected call of TokenCollection.
func (mr *MockInjectorMockRecorder) TokenCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenCollection", reflect.TypeOf((*MockInjector)(nil).TokenCollection))
}

// TokenRepository mocks base method.
func (m *MockInjector) TokenRepository() token.TokenRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenRepository")
	ret0, _ := ret[0].(token.TokenRepository)
	return ret0
}

// TokenRepository indicates an expected call of TokenRepository.
func (mr *MockInjectorMockRecorder) TokenRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenRepository", reflect.TypeOf((*MockInjector)(nil).TokenRepository))
}

// TokenService mocks base method.
func (m *MockInjector) TokenService() token.TokenService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenService")
	ret0, _ := ret[0].(token.TokenService)
	return ret0
}

// TokenService indicates an expected call of TokenService.
func (mr *MockInjectorMockRecorder) TokenService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenService", reflect.TypeOf((*MockInjector)(nil).TokenService))
}

// UserCollection mocks base method.
func (m *MockInjector) UserCollection() db.Collection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCollection")
	ret0, _ := ret[0].(db.Collection)
	return ret0
}

// UserCollection indicates an expected call of UserCollection.
func (mr *MockInjectorMockRecorder) UserCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCollection", reflect.TypeOf((*MockInjector)(nil).UserCollection))
}

// UserRepository mocks base method.
func (m *MockInjector) UserRepository() user.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRepository")
	ret0, _ := ret[0].(user.UserRepository)
	return ret0
}

// UserRepository indicates an expected call of UserRepository.
func (mr *MockInjectorMockRecorder) UserRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRepository", reflect.TypeOf((*MockInjector)(nil).UserRepository))
}

// UserService mocks base method.
func (m *MockInjector) UserService() user.UserService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserService")
	ret0, _ := ret[0].(user.UserService)
	return ret0
}

// UserService indicates an expected call of UserService.
func (mr *MockInjectorMockRecorder) UserService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserService", reflect.TypeOf((*MockInjector)(nil).UserService))
}
