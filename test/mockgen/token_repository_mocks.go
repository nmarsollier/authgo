// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/token/repository.go

// Package mockgen is a generated GoMock package.
package mockgen

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	token "github.com/nmarsollier/authgo/internal/token"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockTokenRepository is a mock of TokenRepository interface.
type MockTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTokenRepositoryMockRecorder
}

// MockTokenRepositoryMockRecorder is the mock recorder for MockTokenRepository.
type MockTokenRepositoryMockRecorder struct {
	mock *MockTokenRepository
}

// NewMockTokenRepository creates a new mock instance.
func NewMockTokenRepository(ctrl *gomock.Controller) *MockTokenRepository {
	mock := &MockTokenRepository{ctrl: ctrl}
	mock.recorder = &MockTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenRepository) EXPECT() *MockTokenRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTokenRepository) Delete(tokenID primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", tokenID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTokenRepositoryMockRecorder) Delete(tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTokenRepository)(nil).Delete), tokenID)
}

// FindByID mocks base method.
func (m *MockTokenRepository) FindByID(tokenID string) (*token.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", tokenID)
	ret0, _ := ret[0].(*token.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockTokenRepositoryMockRecorder) FindByID(tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockTokenRepository)(nil).FindByID), tokenID)
}

// Insert mocks base method.
func (m *MockTokenRepository) Insert(userID primitive.ObjectID) (*token.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", userID)
	ret0, _ := ret[0].(*token.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockTokenRepositoryMockRecorder) Insert(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTokenRepository)(nil).Insert), userID)
}
