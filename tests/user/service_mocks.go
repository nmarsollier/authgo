// Code generated by MockGen. DO NOT EDIT.
// Source: ./user/service.go

// Package user is a generated GoMock package.
package user

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	user "github.com/nmarsollier/authgo/user"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockUserService) ChangePassword(userID, current, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", userID, current, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserServiceMockRecorder) ChangePassword(userID, current, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserService)(nil).ChangePassword), userID, current, newPassword)
}

// Disable mocks base method.
func (m *MockUserService) Disable(userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disable indicates an expected call of Disable.
func (mr *MockUserServiceMockRecorder) Disable(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockUserService)(nil).Disable), userID)
}

// Enable mocks base method.
func (m *MockUserService) Enable(userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enable indicates an expected call of Enable.
func (mr *MockUserServiceMockRecorder) Enable(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockUserService)(nil).Enable), userID)
}

// FindAllUsers mocks base method.
func (m *MockUserService) FindAllUsers() ([]*user.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllUsers")
	ret0, _ := ret[0].([]*user.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllUsers indicates an expected call of FindAllUsers.
func (mr *MockUserServiceMockRecorder) FindAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllUsers", reflect.TypeOf((*MockUserService)(nil).FindAllUsers))
}

// FindById mocks base method.
func (m *MockUserService) FindById(userID string) (*user.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", userID)
	ret0, _ := ret[0].(*user.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserServiceMockRecorder) FindById(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserService)(nil).FindById), userID)
}

// Grant mocks base method.
func (m *MockUserService) Grant(userID string, permissions []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Grant", userID, permissions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Grant indicates an expected call of Grant.
func (mr *MockUserServiceMockRecorder) Grant(userID, permissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Grant", reflect.TypeOf((*MockUserService)(nil).Grant), userID, permissions)
}

// Granted mocks base method.
func (m *MockUserService) Granted(userID, permission string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Granted", userID, permission)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Granted indicates an expected call of Granted.
func (mr *MockUserServiceMockRecorder) Granted(userID, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Granted", reflect.TypeOf((*MockUserService)(nil).Granted), userID, permission)
}

// New mocks base method.
func (m *MockUserService) New(login, name, password string) (*user.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", login, name, password)
	ret0, _ := ret[0].(*user.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockUserServiceMockRecorder) New(login, name, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockUserService)(nil).New), login, name, password)
}

// Revoke mocks base method.
func (m *MockUserService) Revoke(userID string, permissions []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", userID, permissions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Revoke indicates an expected call of Revoke.
func (mr *MockUserServiceMockRecorder) Revoke(userID, permissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockUserService)(nil).Revoke), userID, permissions)
}

// SignIn mocks base method.
func (m *MockUserService) SignIn(login, password string) (*user.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", login, password)
	ret0, _ := ret[0].(*user.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUserServiceMockRecorder) SignIn(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUserService)(nil).SignIn), login, password)
}
